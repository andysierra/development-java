
// Se declara este buildscript ya que necesitaremos el plugin jaxb para
// crear clases de dominio o entidades con base en un .xsd, que luego 
// publicaremos como WSDL.
//buildscript {
//  repositories {
//    jcenter()
//    mavenCentral()
//  }
//
//  dependencies {
//    classpath 'com.github.jacobono:gradle-jaxb-plugin:1.3.6'
//  }
//}
//apply plugin: 'com.github.jacobono.jaxb'

plugins {
    id 'com.intershop.gradle.jaxb' version '5.1.0'
}

dependencies {
	// Dependencias del plugin Bancolombia del entry point gen√©rico
    implementation project(':model')
    implementation project(':usecase')
    implementation 'org.springframework:spring-context'
    
    // dependencias necesarias para consumo de WS:
    implementation ('org.springframework.boot:spring-boot-starter-web-services') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	
	// Generador de WSDL
	implementation 'wsdl4j:wsdl4j:1.6.3'
	
	// Dependencias del JAXB
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.1'
  	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
  	implementation 'jakarta.activation:jakarta.activation-api:2.0.1'
	jaxb 'com.sun.xml.bind:jaxb-xjc:3.0.1'
    jaxb 'com.sun.xml.bind:jaxb-jxc:3.0.1'
    jaxb 'com.sun.xml.bind:jaxb-impl:3.0.1'
}

// Configuraciones de JAXB:
// Se configura la tarea de JAXB para definir el intercambio *.xsd <-> *.java
jaxb {

	def esquemaBB11 = file('src/main/resources/schemas/countries.xsd')		// pendiente: usar variable de entorno Docker o WSDL
	def generated = file('src/main/java/co/com/bancolombia/examplesoap')	
	
	println '*********************************************************'
	println 'Ubicacion del esquema BB11:'
	println esquemaBB11
	println 'Ubicacion de clases generadas:'
	println generated
	println '*********************************************************'

	// xsd a java:
	javaGen {
		exampleSoap {
			schema = esquemaBB11
			outputDir = generated
		}
	}

}